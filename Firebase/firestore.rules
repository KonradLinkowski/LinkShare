service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() {
      return request.auth.uid != null;
    }
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    function isListed(array) {
      return request.auth.uid in array;
    }
    match /folders/{folder} {
      function getFolder() {
        return get(/databases/$(database)/documents/folders/$(folder));
      }
      allow read: if signedIn() && (isOwner(resource.data.owner) || isListed(resource.data.users));
      allow create: if signedIn() && isOwner(request.resource.data.owner);
      allow delete, update: if signedIn() && isOwner(resource.data.owner);
      match /links/{link} {
        function isValid() {
          return request.resource.data.owner != null
            && request.resource.data.name != null && request.resource.data.name.size() > 2
            && request.resource.data.url != null && request.resource.data.url.size() > 2;
        }
        allow read: if signedIn() &&
        	(isOwner(resource.data.owner)
          || isListed(getFolder().data.users)
          || isOwner(getFolder().data.owner));
        allow delete: if signedIn() && (isOwner(resource.data.owner) || isOwner(getFolder().data.owner));
        allow update: if signedIn() && isValid() && isOwner(resource.data.owner);
        allow create: if signedIn() && isValid() && isOwner(request.resource.data.owner);
      }
    }
    match /users/{user} {
      allow get, create, delete, update: if signedIn() && isOwner(user);
      allow list: if signedIn();
    }
  }
}